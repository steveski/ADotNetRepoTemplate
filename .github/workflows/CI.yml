name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow --tags

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.5.0'
      
    - name: Determine Version
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true
        configFilePath: ./GitVersion.yml

    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        version: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        assemblyVersion: ${{ steps.gitversion.outputs.AssemblySemVer }}
        fileVersion: ${{ steps.gitversion.outputs.MajorMinorPatch }}
        informationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal

    ## TODO:
    ##- name: Generate coverage report

    - name: Resolve project name
      shell: pwsh
      run: Add-Content -Path ${env:GITHUB_ENV} "`nprojectName=$(${env:GITHUB_REPOSITORY}.substring(${env:GITHUB_REPOSITORY}.IndexOf('/') + 1))" -Encoding utf8
      
    - name: Pack
      run: dotnet pack "./${{ env.projectName }}/${{ env.projectName }}.csproj" -c Release --no-build --include-symbols -o $GITHUB_WORKSPACE/staging

    - name: Publish build artifacts
      uses: actions/upload-artifact@master
      with:
        name: packages
        path: staging
    
    - shell: bash
      name: Write version
      run: |
        echo '${{ steps.gitversion.outputs.NuGetVersionV2 }}' > version.txt
    - name: Upload version
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt
      

  publish:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: packages
      
    - name: Setup nuget
      uses: nuget/setup-nuget@v1
      
      
    #### Nuget publish step here
      
      
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: packages
      
    - name: Download version
      uses: actions/download-artifact@v2
      with:
        name: version
        
